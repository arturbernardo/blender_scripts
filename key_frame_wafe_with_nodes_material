import bpy

number = 9
counter = 0
counter2 = 0
counter3 = 0

scene = bpy.context.scene
scene.frame_start = 0
scene.frame_end = 165

collection = bpy.data.collections.new("Cubes")
bpy.context.scene.collection.children.link(collection)

# World black
bpy.data.worlds["World"].node_tree.nodes["Background"].inputs[0].default_value = (0, 0, 0, 1)

# Nome do material
material_name = "EmissionMaterial"

# Criar um novo material
material = bpy.data.materials.new(name=material_name)

# Configurar o tipo de shader para Emission
material.use_nodes = True
nodes = material.node_tree.nodes
links = material.node_tree.links

# Remover todos os nós existentes
for node in nodes:
    nodes.remove(node)

texture_coordinate_node = nodes.new(type='ShaderNodeTexCoord')
# Adicionar um nó de emissão
emission_node = nodes.new(type='ShaderNodeEmission')
emission_node.inputs[1].default_value = 6
#cor
#emission_node.inputs[0].default_value = (0.1, 1.0, 0.1, 1.0)  

# Adicionar um nó de saída de material
output_node = nodes.new(type='ShaderNodeOutputMaterial')

# Conectar os nós
texture_coordinate_node = links.new(texture_coordinate_node.outputs["Window"], emission_node.inputs["Color"])
emission_node = links.new(emission_node.outputs["Emission"], output_node.inputs["Surface"])



for b in range(0, number):
    counter2 += 2
    counter3 = 0
    for c in range(0, number):
        bpy.ops.mesh.primitive_cube_add(size=2, location=(counter3+2, counter2-2, counter-2))
        counter3 += 2
        bpy.ops.object.move_to_collection(collection_index=2)
        bpy.ops.object.modifier_add(type='WIREFRAME')       
        bpy.context.object.modifiers["Wireframe"].thickness = 0.05
        bpy.context.object.data.materials.append(material)

cubes = bpy.data.collections["Cubes"].objects
offset = 0

for cube in cubes:
    cube.scale = [1,1,1]
    cube.keyframe_insert(data_path = "scale", frame = 1 + offset)
    cube.scale = [1,1,7]
    cube.keyframe_insert(data_path = "scale", frame = 50 + offset)
    cube.scale = [1,1,.5]
    cube.keyframe_insert(data_path = "scale", frame = 70 + offset)
    cube.scale = [1,1,1]
    cube.keyframe_insert(data_path = "scale", frame = 80 + offset)
    offset += 1
    
def frame_change_post(scene, dg):
    objeto = bpy.context.object
    frame = scene.frame_current
    scales = bpy.context.object.scale
    print(f"frame {frame} ------------------ {scales}")

    
bpy.app.handlers.frame_change_post.clear()
bpy.app.handlers.frame_change_post.append(frame_change_post)
